在柠檬水摊上，每一杯柠檬水的售价为 5 美元。
顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
注意，一开始你手头没有任何零钱。
如果你能给每位顾客正确找零，返回 true ，否则返回 false 。

示例 1：
输入：[5,5,5,10,20]
输出：true
解释：
前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
由于所有客户都得到了正确的找零，所以我们输出 true。

示例 2：
输入：[5,5,10]
输出：true

示例 3：
输入：[10,10]
输出：false

示例 4：
输入：[5,5,10,10,20]
输出：false

解释：
前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。
对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。
对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。
由于不是每位顾客都得到了正确的找零，所以答案是 false。
 
提示：

0 <= bills.length <= 10000
bills[i] 不是 5 就是 10 或是 20

思路:依次判断客户的钱是5，10还是20，依次做加减即可，注意当顾客的钱为20时，有坑，此坑也体现了贪心的思想!(详解代码注释)

Java:(AC)
class Solution {
    public boolean lemonadeChange(int[] bills) {
        int n = bills.length;
        //我的零钱，myMoney[0]代表5，myMoney[1]代表10，myMoney[2]代表20
        //注:其实20的可以不记录,因为不用20来找零,从而增加效率
        int[] myMoney = new int[]{0,0};
        //特殊情况
        if(bills[0] != 5){
            return false;
        } 
        //贪心:每步bills[i]都计算最优解
        for(int i = 0;i < n;i++){
            //顾客的钱为5
            if(bills[i] == 5){
                //直接增加金额
                myMoney[0]++;
            }
            //顾客的钱为10
            else if(bills[i] == 10){
                //如果有一张5以上，可以找零
                if(myMoney[0] >= 1){
                    myMoney[1]++;
                    myMoney[0]--;
                }
                else{
                    return false;   
                }
            }
            //顾客的钱为20
            else{
                //如果有a.1张10一张5及以上，或者b.有三张5及以上，可以找零
                //注意:此处两个判断条件顺序不能调换，必须先判断a，再判断b
                //其实也很好理解，因为我们贪心算法要的是最优解，而尽可能地保存万能的"5"就是此理。
                //否则在数组特别大的情况下，可能出现明明可以找零的情况下，而把5都换出来了，剩下一堆10，无法找还客户给的20
                if(myMoney[1] >= 1 && myMoney[0] >= 1){
                    myMoney[0]--;
                    myMoney[1]--;
                }
                else if(myMoney[0] >= 3){
                    myMoney[0] -= 3;
                }
                else{
                    return false;
                }
            }
        }
        //如果能跳出循环，代表全部成功找零，返回true
        return true;
    }
}
