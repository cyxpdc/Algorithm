旋转字符串
给定一个字符串和一个偏移量，根据偏移量旋转字符串(从左向右旋转)

样例
对于字符串 "abcdefg".

offset=0 => "abcdefg"
offset=1 => "gabcdef"
offset=2 => "fgabcde"
offset=3 => "efgabcd"
挑战
在数组上原地旋转，使用O(1)的额外空间

java:(offset超过n会出错)
public class Solution {
    /**
     * @param str: An array of char
     * @param offset: An integer
     * @return: nothing
     */
    public void rotateString(char[] str, int offset) {
        // write your code here
        int n = str.length;
        char arr1[]  = new char[n]; 
        char arr2[]  = new char[n]; 
        //存反转的字符
        for(int i = 0;i < offset;++i){
            arr1[i] = str[n-i-1];
        }
        //存未反转的字符
        for(int i = 0;i < n-offset;++i){
            arr2[i] = str[i];
        }
        //逆序输入反转的字符
        for(int i = 0;i < offset;++i){
            str[i] = arr1[offset-i-1];
        }
        //顺序输入未反转的字符
        for(int i = 0;i < n-offset;++i){
            str[offset+i] = arr2[i];
        }
    }
}
（线性代数之矩阵）
我们把字符串看成由两段组成的，记为XY。左旋转相当于要把字符串XY变成YX。
我们先定义一种翻转的操作，就是翻转字符串中字符的先后顺序。把X翻转后记为XT。显然有(XT)T=X。
我们首先对X和Y两段分别进行翻转操作，这样就能得到XTYT。接着再对XTYT进行翻转操作，得到(XTYT)T=(YT)T(XT)T=YX。正好是我们期待的结果。
分析到这里我们再回到原来的题目。
我们要做的仅仅是把字符串分成两段，第一段为前面m个字符，其余的字符分到第二段。再定义一个翻转字符串的函数，按照前面的步骤翻转三次就行了。
时间复杂度和空间复杂度都合乎要求。
java:(ac)
public class Solution {
    /**
     * @param str: an array of char
     * @param offset: an integer
     * @return: nothing
     */
    public void rotateString(char[] str, int offset) {
        // write your code here
        if (str == null || str.length == 0)
            return;
            
        offset = offset % str.length;
        reverse(str, 0, str.length - offset - 1);
        reverse(str, str.length - offset, str.length - 1);
        reverse(str, 0, str.length - 1);
    }
    
    private void reverse(char[] str, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            char temp = str[i];
            str[i] = str[j];
            str[j] = temp;
        }
    }
}
