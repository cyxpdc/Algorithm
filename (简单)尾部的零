描述
设计一个算法，计算出n阶乘中尾部零的个数
您在真实的面试中是否遇到过这个题？  是
样例
11! = 39916800，因此应该返回 2
挑战
O(logN)的时间复杂度
java:(失败)
public class Solution {
    /*
     * @param n: An integer
     * @return: An integer, denote the number of trailing zeros in n!
     */
    public long trailingZeros(long n) {
        //只需要判断n能凑出几对2*5的组合
        //如11，有2*5，4*10，所以有两个0
        long count = 0;
        long arr[] = new long[n];
        for(long i = 1; i <= n; ++i){
            arr[i-1] = i;
        }
        //遍历每个数
        for(long i = 1; i <= n; ++i){
            if(0 == i % 2){
                ////如果是2的倍数，则判断是否与之有相匹配的数字
                for(long j = 0;j < n;j++ ){
                    if(0 == (i * arr[j]) % 2){
                        ++count;
                        arr[j] = 0;
                    }
                }
            }
        }
        return count;
    }
}
java:成功
class Solution {
    /*
     * param n: As desciption
     * return: An integer, denote the number of trailing zeros in n!
     */
    public long trailingZeros(long n) {
        //只需要判断n能凑出几对2*5的组合
        //如11，有2*5，4*10，所以有两个0
        //又因为2总是比5多，所以判断5的个数即可
        long count = 0;
        while (n != 0) {
            count += n / 5;
            n /= 5;
            //或如下两行
            //n /= 5;
            //count += n;
        }
        return count;
    }
};
