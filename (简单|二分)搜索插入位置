给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
你可以假设数组中无重复元素。

示例 1:
输入: [1,3,5,6], 5
输出: 2

示例 2:
输入: [1,3,5,6], 2
输出: 1

示例 3:
输入: [1,3,5,6], 7
输出: 4

示例 4:
输入: [1,3,5,6], 0
输出: 0

class Solution {
    
    public int searchInsert(int[] nums, int target) {
        int result = binarySearch(nums,0,nums.length-1,target);
        return result;
    }
    
    private int binarySearch(int[] nums,int low,int high,int target){
        if(low > high){
            throw new RuntimeException();
        }
        while(low <= high){
            //这行如果当int为最大值(2147483647)，且target在右边的时候，第二次计算会出错
            //溢出:mid = (1073741824 + 2147483646)/2
            //int mid = (low + high)/2;
            int mid = low + (high-low)/2;
            if(nums[mid] > target){
                high = mid - 1;
            }
            else if(nums[mid] < target){
                low = mid + 1;
            }
            else{
                return mid;
            }
        }
        //如果没找到，就插入
        for(int i = 0;i < nums.length;i++){
            if(target < nums[i]){
                return i;
            }
        }
        //在上面的循环中如果没找到，就插入到最后
        return nums.length;
    }
}

2.效率非常高,但是if比较多，有点难理解
class Solution {
    
    
    public int searchInsert(int[] nums, int target) {
        int result = binarySearch(nums,0,nums.length-1,target);
        return result;
    }
    
    private int binarySearch(int[] nums,int low,int high,int target){
        if(low > high){
            throw new RuntimeException();
        }
        //思路：如果有两次判断，一次是<，一次是>，就说明可以插入
        //为此需要标志位,>用true，<用false
        int count = 0;//判断的次数
        boolean flag = false;
        //=要加上，因为这个数也需要判断
        while(low <= high){
            //这行如果当int为最大值(2147483647)，且target在右边的时候，第二次计算会出错
            //溢出:mid = (1073741824 + 2147483646)/2
            //int mid = (low + high)/2;
            int mid = low + (high-low)/2;
            if(nums[mid] > target){
                high = mid - 1;
                if(count == 0){
                    count++;
                    flag = true;
                    continue;
                }
                //如果符号改变了，就判断中间是否没有其他的数了，没有的话，就返回插入的位置
                if(flag == false){
                    if(low == high-1){
                        return high;
                    }
                }
                //设置状态
                flag = true;
            }
            else if(nums[mid] < target){
                low = mid + 1;
                if(count == 0){
                    count++;
                    flag = false;
                    continue;
                }
                if(flag == true){
                    if(low == high-1){
                        return high;
                    }
                }
                flag = false;
            }
            else{
                return mid;
            }
        }
        //当因为low > high退出时，说明low就是插入的位置
        //因为如果是nums[mid] > target，high会= mid - 1，这时候low > high,会退出循环，所以要插入low的位置
        //如果是nums[mid] < target，low会=mid + 1，这时候low > high,也会退出循环，所以也是插入low的位置
        return low;
    }
}
