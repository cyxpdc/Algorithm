给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：
左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

示例 1:
输入: "()"
输出: true

示例 2:
输入: "()[]{}"
输出: true

示例 3:
输入: "(]"
输出: false

示例 4:
输入: "([)]"
输出: false

示例 5:
输入: "{[]}"
输出: true

leetcode官方题解:

最简单的版本，即只有单一括号，伪代码：
class Solution {
    //表达式是否无效取决于在该表达式的其余部分的某处是否有相匹配的闭括号（即 )）
    //最简单版本的伪代码
    public boolean isValid(String s) {
        int left = 0;
        char[] arr = s.toCharArray();
        for(int i = 0;i < arr.length;++i){
            if(遇到左括号){
                left += 1;
            }
            else if(遇到闭括号){
                if(left == 0){
                    return false;
                }
                left -= 1;
            }
        }
        if(left == 0){
            return true;
        }
        return false;
    }
}

题目版本:
如果类比上面的解法，用三个计数器来维护，是否可行呢？答案是不可行，因为不能忽略括号出现的位置！
如果最近的未配对的开括号是一个花括号，而不是一个方括号，因此计数方法在这里被打破了
所以需要使用栈来解决
//1.初始化栈 S。
//2.一次处理表达式的每个括号。
//3.如果遇到开括号，我们只需将其推到栈上即可。这意味着我们将稍后处理它，让我们简单地转到前面的 子表达式。
//4.如果我们遇到一个闭括号，那么我们检查栈顶的元素。如果栈顶的元素是一个 相同类型的 左括号，那么我们将它从栈中弹出并继续处理。否则，       这意味着表达式无效。
//5.如果到最后我们剩下的栈中仍然有元素，那么这意味着表达式无效。
class Solution {
    //处理映射的hashMap
    private HashMap<Character,Character> mappings;
    //将闭括号->开括号放到map里面
    public Solution(){
        this.mappings = new HashMap<>();
        this.mappings.put(')','(');
        this.mappings.put('}','{');
        this.mappings.put(']','[');
    }
    
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(int i = 0;i < s.length();i++){
            char c = s.charAt(i);
            //如果遇到闭括号
            if(this.mappings.containsKey(c)){
                //检查栈顶元素
                char topElement = stack.empty() ? '#' : stack.pop();
                if(topElement != this.mappings.get(c)){
                    return false;
                }
            }
            //如果遇到开括号
            else{
                stack.push(c);
            }
        }
        return stack.isEmpty();
    }
}
