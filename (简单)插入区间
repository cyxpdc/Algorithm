插入区间:
Given a non-overlapping interval list which is sorted by start point.
给出一个无重叠的按照区间起始端点排序的区间列表。
Insert a new interval into it, make sure the list is still in order and non-overlapping (merge intervals if necessary).
在列表中插入一个新的区间，确保列表仍然有序且不重叠（如果有必要，合并区间）。

样例
Insert (2, 5) into [(1,2), (5,9)], we get [(1,9)].

Insert (3, 4) into [(1,2), (5,9)], we get [(1,2), (3,4), (5,9)].

Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16]


/**
 * Definition of Interval:
 * public classs Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 * }
 */
java:(ac) 参考博客：https://blog.csdn.net/xygy8860/article/details/46892533
public class Solution {
    /**
     * @param intervals: Sorted interval list.
     * @param newInterval: new interval.
     * @return: A new interval list.
     */
    public List<Interval> insert(List<Interval> intervals, Interval newInterval){
        // write your code here
        //结果集
        List<Interval> resultList = new ArrayList<Interval>();
        //旧区间大小
        int n = intervals.size();
        //特殊情况
        if(0 == n){
            resultList.add(newInterval);
            return resultList;
        }
        for(int i = 0;i < n;i++){
            //1.如果新区间结束点小于当前区间开始点;
            //则直接将新区间插入到当前区间的前面，直接返回即可。
            if(newInterval.end < intervals.get(i).start){
                resultList.add(newInterval);
                for(int j = i;j < n;j++){
                    resultList.add(intervals.get(j));
                }
                break;
            }
            //2.如果新区间开始点大于当前区间结束点;
            //则当前点添加结果集后继续遍历。
            else if(newInterval.start > intervals.get(i).end){
                resultList.add(intervals.get(i));
            }
            //3.需要合并的情况：
            //如果新区间和当前区间发生重合;
            //则start取两者最小的start，end取最大的end;
            //生成一个新的区间后，继续遍历。
            else{
                //合并区间
                newInterval.start = Math.min(newInterval.start,intervals.get(i).start);
                newInterval.end = Math.max(newInterval.end,intervals.get(i).end);
            }
            //a.如果是最后一个数据，就添加结果集中;
            //这种情况发生在遍历到末尾也没有区间重合这个地方。
            if(i == n - 1){
                resultList.add(newInterval);
            }
        }
        return resultList;
    }
}
